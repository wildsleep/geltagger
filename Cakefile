# Building requires coffee-script at a minimum. For
# help installing, try:
#
# `npm -g install coffee-script`
#
# Other dependencies for this project can be installed with the build target:
# `cake npm-install`
#
# Original Cakefile from Chosen.js
#   https://github.com/harvesthq/chosen/blob/master/Cakefile
#------------------------------------------------------------------------------

sourceDir = "src"
buildDir = "build"

name = "geltagger.js"
description = "Automated Gelbooru file tagger"
authors = "Greg Smith"
date = "2012"
gitUrl = "https://github.com/smrq/geltagger"

dependencies = [
	"async"
	"file"
	"imagemagick"
	"MD5"
	"node-fs"
	"optimist"
	"restler"
	"uglify-js"
	"xml2js"
]

#------------------------------------------------------------------------------

fs              	= require 'fs'
path            	= require 'path'
file            	= require 'file'
nodefs          	= require 'node-fs'
{spawn, exec}   	= require 'child_process'
CoffeeScript    	= require 'coffee-script'
{parser, uglify}	= require 'uglify-js'

# Get the version number
version = "#{fs.readFileSync('VERSION')}".replace /[^0-9a-zA-Z.]*/gm, ''
version_tag = "v#{version}"

Array::unique = ->
	output = {}
	output[@[key]] = @[key] for key in [0...@length]
	value for key, value of output

RegExp.quote = (str) -> str.replace(/([.?*+^$[\]\\(){}-])/g, "\\$1")

# Pull down node package dependencies
task 'npm-install', ->
	run "npm install", dependencies

# Method used to write a javascript file
write_javascript_file = (filename, body) ->

	fs.writeFileSync filename, """
		/*
			#{name} - #{description}
			by #{authors}

			Version #{version}
			Full source at #{gitUrl}
			Copyright (c) #{date} #{authors}

			MIT License, #{gitUrl}/blob/master/LICENSE.md
			This file is generated by `cake build`, do not edit it by hand.
		*/
		#{body}
	"""
	console.log "Wrote #{filename}"

# Build an individual file
buildFile = (filename, cb) ->
	fileContents = null
	try
		fileContents = "#{fs.readFileSync(filename)}"
		code = CoffeeScript.compile( fileContents )
		minifiedCode = parser.parse( code )
		minifiedCode = uglify.ast_mangle( minifiedCode )
		minifiedCode = uglify.ast_squeeze( minifiedCode )
		minifiedCode = uglify.gen_code( minifiedCode )

		outputFilename = filename
		outputFilename = outputFilename.replace(new RegExp('^' + RegExp.quote(sourceDir)), buildDir)
		outputFilename = outputFilename.replace(/\.coffee$/,'.js')

		write_javascript_file(outputFilename, code)
		write_javascript_file(outputFilename.replace(/\.js$/,'.min.js'), minifiedCode)

		cb() if typeof cb is 'function'
	catch e
		print_error e, filename, fileContents

# Task to build all files in the source directory
task 'build', 'build from source', build = (cb) ->
	for filename in fs.readdirSync(sourceDir)
		console.log "Building file #{filename}"
		buildFile path.join(sourceDir, filename)

# Task to watch for files to build in the source directory
task 'watch', 'watch source directory for changes and build', ->
	console.log "Watching for changes in source directory #{sourceDir}..."

	fs.watch sourceDir, (event, filename) ->
		console.log "Saw change in #{filename}"
		buildFile path.join(sourceDir, filename)

# Run a command-line executable
run = (cmd, args, cb, err_cb) ->
	execCmd = "#{cmd} #{args.join(' ')}"
	console.log "> #{execCmd}"
	exec execCmd, (err, stdout, stderr) ->
		if err isnt null
			console.error stderr

			if typeof err_cb is 'function'
				err_cb()
			else
				throw "Failed command execution (#{err})."
		else
			cb(stdout) if typeof cb is 'function'

# Error printing for compilation
print_error = (error, file_name, file_contents) ->
	line = error.message.match /line ([0-9]+):/
	if line && line[1] && line = parseInt(line[1])
		contents_lines = file_contents.split "\n"
		first = if line-4 < 0 then 0 else line-4
		last  = if line+3 > contents_lines.size then contents_lines.size else line+3
		console.log "Error compiling #{file_name}. \"#{error.message}\"\n"
		index = 0
		for line in contents_lines[first...last]
			index++
			line_number = first + 1 + index
			console.log "#{(' ' for [0..(3-(line_number.toString().length))]).join('')} #{line}"
	else
		console.log "Error compiling #{file_name}: #{error.message}"